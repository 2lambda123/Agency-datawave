#!/usr/bin/env bash

#
# This script is intended to be non-interactive and suitable for crond or other automation.
#
# The script will automatically generate (and optionally commit & push) _posts/release entries for
# the gh-pages branch, i.e., for newly tagged DW releases that are discovered on DW_GITHUB_REMOTE_URL.
# Currently, we look for new 3.x, 5.x and 6.x updates, for Accumulo 1.10.x- and 2.1.x-compatible DW releases.
#
# Usage:
#   <script-name> [--push, -p] [--verbose, -v] [--help, -h]
#
# Use of '--push (-p)' option will attempt to commit and push changes to DW_GITHUB_REMOTE_URL
#
# Prerequisites:
#   (1) DW_GITHUB_REMOTE_URL must be defined in the user's environment
#   (2) The git executable must be on the user's PATH
#

readonly TMP_DW_DIR=$(mktemp -d /tmp/$( basename $0 )_datawave_XXXXXXX)
readonly TMP_GHPAGES_DIR=$(mktemp -d /tmp/$( basename $0 )_ghpages_XXXXXXX)
readonly POSTS_DIR=${TMP_GHPAGES_DIR}/_posts/release

declare -i _new_release_count=0

_debug=false
_dry_run=true

log() {
  echo "[$(date +%Y-%m-%d\ %H:%M:%S)] "${@}""
}

logd() {
  [[ "${_debug}" == true ]] && log "[DEBUG] ${1}"
}

logi() {
  log "[INFO] ${1}"
}

logw() {
  log "[WARN] ${1}"
}

loge() {
  log "[ERROR] ${1}"
}

logf() {
  log "[FATAL] ${1}"
  exit 1
}

usage() {
  echo "Usage:"
  echo " $( basename "$0" ) [--push, -p] [--verbose, -v] [--help, -h]"
  echo "Options:"
  echo " --push, -p    | Commit and push changes to DW_GITHUB_REMOTE_URL"
  echo " --verbose, -v | Turn on debug mode"
  echo " --help, -h    | Print this usage information and exit"
  exit 0
}

configure() {
  while [[ "${1}" != "" ]]; do
    case "${1}" in
      --verbose | -v)
         _debug=true
         shift
         ;;
      --push | -p)
         _dry_run=false
         shift
         ;;
      --help | -h)
         usage
         ;;
      *)
         loge "Invalid argument: '${1}'"
         usage
    esac
    shift
  done
  readonly GIT=$(which git)
  [[ -z "${GIT}" ]] && logf "Can't locate git exe!"
  [[ -z "${DW_GITHUB_REMOTE_URL}" ]] && logf "DW_GITHUB_REMOTE_URL is not set in your environment!"
  [[ "${_debug}" == false ]] && readonly GIT_QUIET="--quiet"
}

search() {
  # Return array index of the search term, if found. -1 otherwise
  local _searchTerm=${1}
  shift
  local _arr=("$@")
  local i=0;
  for str in "${_arr[@]}" ; do
    if [[ "$str" == "${_searchTerm}" ]] ; then
      echo $i
      return
    else
      ((i++))
    fi
  done
  echo "-1"
}

cleanup() {
  local _dirs=("$@")
  for dir in "${_dirs[@]}" ; do
    if [[ -d "${dir}" ]] ; then
      if [[ "${dir}" == /tmp/*"$( basename $0 )"* ]] ; then
        rm -rf "${dir}" && logi "Deleted ${dir}"
      else
        logw "I can't delete this directory: ${dir}"
      fi
    fi
  done
}

generate_posts() {
  local _accumulo_minor_v=${1} ; shift
  local _start_index=${1} ; shift
  local _arr=("$@")
  for ((i=${_start_index}; i<${#_arr[@]}; i++)) ; do
    local _yyyymmdd=$(cd ${TMP_DW_DIR} && ${GIT} for-each-ref --format="%(creatordate:short)" refs/tags/${_arr[i]})
    local _post_file_name="${POSTS_DIR}/${_yyyymmdd}-datawave-${_arr[i]}.md"
    local _post="---
title: DataWave ${_arr[i]}
version: ${_arr[i]}
tags: [news, releases]
draft: false
---
A new Accumulo ${_accumulo_minor_v}.x-compatible DataWave release has been tagged

[View the release on GitHub]({{ site.repository_url }}/releases/tag/{{ page.version }})
"
    logi "Generating post for '${_arr[i]}' @ ${_post_file_name}"
    echo "${_post}" > ${_post_file_name}
    ((_new_release_count++))
  done
}

update_git() {
  local _commit_message="Creating post(s) for ${_new_release_count} recent DW release(s)"
  cd "${TMP_GHPAGES_DIR}"
  ${GIT} add . || logf "Failed to git-add updates to local gh-pages branch!"
  logi "======================== BEGIN git diff ============================="
  ${GIT} diff HEAD
  logi "======================== END git diff ==============================="
  if [[ "${_dry_run}" == false ]] ; then
    ${GIT} commit -m "${_commit_message}" || logf "Failed to git-commit changes on local gh-pages branch!"
    ${GIT} push origin gh-pages || logf "Failed to push gh-pages update to remote repository"
    logi "Commit for ${_new_release_count} new release(s) pushed to remote repository"
  else
    logi "Skipping commit/push to remote repository"
  fi
}

configure "${@}"

logi "Cloning repos..."

if ! ${GIT} clone ${GIT_QUIET} "${DW_GITHUB_REMOTE_URL}" ${TMP_DW_DIR} ; then
  logf "Failed to clone DataWave!"
fi

logi "DataWave was cloned to ${TMP_DW_DIR}"

if ! ${GIT} clone ${GIT_QUIET} --single-branch --branch gh-pages "${DW_GITHUB_REMOTE_URL}" ${TMP_GHPAGES_DIR} ; then
  logf "Failed to clone DataWave's gh-pages branch!"
fi

logi "gh-pages branch was cloned to ${TMP_GHPAGES_DIR}"

# Get semver-sorted lists of tags. Filter out RC's and other cruft

_3x_tags=( $(cd ${TMP_DW_DIR} && $GIT tag --sort=v:refname | egrep '^3\.[0-9]+\.[0-9]+$') )
_5x_tags=( $(cd ${TMP_DW_DIR} && $GIT tag --sort=v:refname | egrep '^5\.[0-9]+\.[0-9]+$') )
_6x_tags=( $(cd ${TMP_DW_DIR} && $GIT tag --sort=v:refname | egrep '^6\.[0-9]+\.[0-9]+$') )

# Get semver-sorted lists of releases that've already been published to gh-pages

_3x_posts=()
_3x_posts_count=$(ls -1 ${POSTS_DIR}/*datawave-3\.* 2>/dev/null | wc -l)
if [[ ${_3x_posts_count} -gt 0 ]] ; then
  _3x_posts=( $(cd ${POSTS_DIR} && ls -1 *datawave-3\.*\.md | cut -d'-' -f5 | sed 's/.\{3\}$//' | sort -t "." -k1,1n -k2,2n -k3,3n) )
  _3x_index=$(search "${_3x_posts[-1]}" "${_3x_tags[@]}")
fi

if [[ ${_3x_posts_count} -gt 0 && ${_3x_index} -lt 0 ]] ; then
  logf "Git tag for the ${_3x_posts[-1]} post wasn't found in Github"
fi

_5x_posts=()
_5x_posts_count=$(ls -1 ${POSTS_DIR}/*datawave-5\.* 2>/dev/null | wc -l)
if [[ ${_5x_posts_count} -gt 0 ]] ; then
  _5x_posts=( $(cd ${POSTS_DIR} && ls -1 *datawave-5\.*\.md | cut -d'-' -f5 | sed 's/.\{3\}$//' | sort -t "." -k1,1n -k2,2n -k3,3n) )
  _5x_index=$(search "${_5x_posts[-1]}" "${_5x_tags[@]}")
fi

if [[ ${_5x_posts_count} -gt 0 && ${_5x_index} -lt 0 ]] ; then
  logf "Git tag for the ${_5x_posts[-1]} post wasn't found in Github"
fi

_6x_posts=()
_6x_posts_count=$(ls -1 ${POSTS_DIR}/*datawave-6\.* 2>/dev/null | wc -l)
if [[ ${_6x_posts_count} -gt 0 ]] ; then
  _6x_posts=( $(cd ${POSTS_DIR} && ls -1 *datawave-6\.*\.md | cut -d'-' -f5 | sed 's/.\{3\}$//' | sort -t "." -k1,1n -k2,2n -k3,3n) )
  _6x_index=$(search "${_6x_posts[-1]}" "${_6x_tags[@]}")
fi

if [[ ${_6x_posts_count} -gt 0 && ${_6x_index} -lt 0 ]] ; then
  logf "Git tag for the ${_6x_posts[-1]} post wasn't found in Github"
fi

logi "Latest 3.x post in gh-pages: ${_3x_posts[-1]}"
logi "Latest DW 3.x release: ${_3x_tags[-1]}"
logd "3.x tag list: $(printf '%s\n' "${_3x_tags[@]}" | paste -sd ',' -)"
logd "Index of ${_3x_posts[-1]} tag: ${_3x_index}"

# If latest posted 3x tag == latest DW 3x tag, then we're done
[[ "${_3x_posts[-1]}" == "${_3x_tags[-1]}" ]] && _skip_3x=true

logi "Latest 5.x post in gh-pages: ${_5x_posts[-1]}"
logi "Latest DW 5.x release: ${_5x_tags[-1]}"
logd "5.x tag list: $(printf '%s\n' "${_5x_tags[@]}" | paste -sd ',' -)"
logd "Index of ${_5x_posts[-1]} tag: ${_5x_index}"

# If latest posted 5x tag == latest DW 5x tag, then we're done 
[[ "${_5x_posts[-1]}" == "${_5x_tags[-1]}" ]] && _skip_5x=true

logi "Latest 6.x post in gh-pages: ${_6x_posts[-1]}"
logi "Latest DW 6.x release: ${_6x_tags[-1]}"
logd "6.x tag list: $(printf '%s\n' "${_6x_tags[@]}" | paste -sd ',' -)"
logd "Index of ${_6x_posts[-1]} tag: ${_6x_index}"

# If latest posted 6x tag == latest DW 6x tag, then we're done 
[[ "${_6x_posts[-1]}" == "${_6x_tags[-1]}" ]] && _skip_6x=true

if [[ -n "${_skip_3x}" && -n "${_skip_5x}" && -n "${_skip_6x}" ]] ; then
  logi "We're done. There's nothing new to publish"
else
  # Generate new posts and update local/remote git repos
  [[ -z "${_skip_3x}" ]] && generate_posts "1.10" "$((${_3x_index}+1))" "${_3x_tags[@]}"
  [[ -z "${_skip_5x}" ]] && generate_posts "2.1"  "$((${_5x_index}+1))" "${_5x_tags[@]}"
  [[ -z "${_skip_6x}" ]] && generate_posts "2.1"  "$((${_6x_index}+1))" "${_6x_tags[@]}"
  logi "New releases since the last gh-pages update: ${_new_release_count}"
  update_git
fi

if [[ ${_new_release_count} -eq 0 ]] ; then
  cleanup "${TMP_GHPAGES_DIR}" "${TMP_DW_DIR}"
else
  cleanup "${TMP_DW_DIR}"
  logw "Leaving ${TMP_GHPAGES_DIR} intact, because there were changes made"
fi

exit 0
